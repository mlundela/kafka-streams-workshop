spring:
  kafka:
    bootstrap-servers: kafka:9092
  cloud:
    function.definition: transformBook #,joinAuthor
    stream:
      kafka:
        streams:
          binder:
            deserializationExceptionHandler: logandfail
            configuration:
              schema.registry.url: ${SCHEMA_REGISTRY_URL:http://docker:8081}
              auto.register.schemas: true
              default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
              state.dir: ${STATE_DIR:/tmp/kafka-streams}
            functions:
              transformBook.applicationId: transform-book-v2
              joinAuthor.applicationId: join-author-v1
          bindings:
            transformBook-in-0.consumer.keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde

      bindings:

        # Transform from debezium format to our book model
        transformBook-in-0.destination: no.booster.inventory.book
        transformBook-out-0.destination: books

        joinAuthor-in-0.destination: books
        joinAuthor-in-1.destination: authors
        joinAuthor-out-0.destination: book-projections
